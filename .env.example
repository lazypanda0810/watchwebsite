# =========================================
# CHRONOS WATCH SHOP - ENVIRONMENT CONFIGURATION
# =========================================
# 
# This file contains all the environment variables needed to run the Chronos Watch Shop application.
# Copy this file to .env and fill in the actual values for your environment.
#
# SECURITY NOTICE: Never commit .env files with actual secrets to version control!
# Always use different values for development, staging, and production environments.
#
# =========================================

# =========================================
# SERVER CONFIGURATION
# =========================================

# Port number for the backend server
# Default: 5000 for development, 8080 for some cloud providers
PORT=5000

# Environment mode - affects logging, error handling, and security features
# Options: development, staging, production
NODE_ENV=development

# Domain where your frontend is hosted (used for CORS and callbacks)
# Development: http://localhost:8080
# Production: https://your-domain.com
FRONTEND_URL=http://localhost:8080

# Backend API base URL
# Development: http://localhost:5000
# Production: https://api.your-domain.com
BACKEND_URL=http://localhost:5000

# =========================================
# DATABASE CONFIGURATION
# =========================================

# MongoDB connection string
# Local development: mongodb://localhost:27017/chronos_watch_shop
# MongoDB Atlas: mongodb+srv://username:password@cluster.mongodb.net/chronos_watch_shop
MONGODB_URI=mongodb://localhost:27017/chronos_watch_shop

# Database name (if not specified in URI)
DB_NAME=chronos_watch_shop

# MongoDB connection options
DB_MAX_POOL_SIZE=10
DB_SERVER_SELECTION_TIMEOUT=5000

# =========================================
# SESSION CONFIGURATION
# =========================================

# Secret key for session encryption
# IMPORTANT: Use a strong, unique secret in production!
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
SESSION_SECRET=your-super-secret-session-key-change-this-in-production-make-it-very-long-and-random

# Session cookie settings
SESSION_MAX_AGE=604800000
# Session name (default: connect.sid)
SESSION_NAME=chronos_session

# Session store settings
SESSION_SECURE=false
# Set to true in production with HTTPS
SESSION_HTTP_ONLY=true
SESSION_SAME_SITE=lax

# =========================================
# GOOGLE OAUTH CONFIGURATION
# =========================================

# Google OAuth 2.0 credentials
# Get these from: https://console.cloud.google.com/apis/credentials
# 1. Create a new project or select existing
# 2. Enable Google+ API
# 3. Create OAuth 2.0 Client IDs
# 4. Add authorized redirect URIs

# Google OAuth Client ID
GOOGLE_CLIENT_ID=your-google-client-id-from-console.apps.googleusercontent.com

# Google OAuth Client Secret
GOOGLE_CLIENT_SECRET=your-google-client-secret-from-console

# OAuth callback URL (must match Google Console settings)
# Development: http://localhost:5000/auth/google/callback
# Production: https://api.your-domain.com/auth/google/callback
GOOGLE_CALLBACK_URL=http://localhost:5000/auth/google/callback

# Authorized domains for OAuth (comma-separated)
AUTHORIZED_DOMAINS=localhost,your-domain.com

# =========================================
# RAZORPAY PAYMENT CONFIGURATION
# =========================================

# Razorpay API credentials
# Get these from: https://dashboard.razorpay.com/app/keys
# Test keys start with 'rzp_test_', Live keys start with 'rzp_live_'

# Razorpay Key ID (Public key - safe to expose in frontend)
RAZORPAY_KEY_ID=rzp_test_your_key_id_here

# Razorpay Key Secret (Private key - NEVER expose in frontend!)
RAZORPAY_KEY_SECRET=your_razorpay_key_secret_here

# Razorpay Webhook Secret
# Used to verify webhook authenticity
# Get from: https://dashboard.razorpay.com/app/webhooks
RAZORPAY_WEBHOOK_SECRET=your_webhook_secret_here

# Payment configuration
PAYMENT_MODE=test
# Options: test, live
CURRENCY=INR
# Supported: INR, USD, EUR, GBP, etc.

# Payment URLs (where users are redirected after payment)
PAYMENT_SUCCESS_URL=http://localhost:8080/payment/success
PAYMENT_FAILURE_URL=http://localhost:8080/payment/failure
PAYMENT_CANCEL_URL=http://localhost:8080/payment/cancel

# Payment timeout (in seconds)
PAYMENT_TIMEOUT=900
# 15 minutes = 900 seconds

# Minimum and maximum payment amounts (in smallest currency unit)
# For INR: 100 = ₹1.00, 500000 = ₹5,000.00
MIN_PAYMENT_AMOUNT=100
MAX_PAYMENT_AMOUNT=500000

# =========================================
# EMAIL CONFIGURATION (GMAIL SMTP)
# =========================================

# Gmail SMTP settings for sending verification emails
# Note: UseApp Passwords, not your regular Gmail password
# Enable 2FA and generate App Password: https://myaccount.google.com/apppasswords

EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
# Use 465 for SSL, 587 for TLS

# Gmail credentials
EMAIL_USER=your-gmail@gmail.com
# Use App Password, not regular password!
EMAIL_PASSWORD=your-gmail-app-password

# Email sender information
EMAIL_FROM=noreply@chronoswatch.com
EMAIL_FROM_NAME=Chronos Watch Shop

# Email settings
EMAIL_SECURE=false
# Set to true for port 465 (SSL)
EMAIL_TLS=true
EMAIL_TIMEOUT=10000

# =========================================
# JWT CONFIGURATION
# =========================================

# JWT secret for token signing
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=your_jwt_secret_key_here_make_it_long_and_random

# JWT token expiration
JWT_EXPIRES_IN=7d
# Options: 1h, 24h, 7d, 30d

# JWT refresh token settings
JWT_REFRESH_SECRET=your_jwt_refresh_secret_different_from_main_secret
JWT_REFRESH_EXPIRES_IN=30d

# =========================================
# SECURITY CONFIGURATION
# =========================================

# Verification code expiration time (in milliseconds)
# 600000 = 10 minutes
VERIFICATION_CODE_EXPIRES=600000

# Rate limiting settings
RATE_LIMIT_WINDOW_MS=900000
# 15 minutes = 900000ms
RATE_LIMIT_MAX_REQUESTS=100

# Auth-specific rate limiting (more restrictive)
AUTH_RATE_LIMIT_WINDOW_MS=900000
# 15 minutes
AUTH_RATE_LIMIT_MAX_REQUESTS=5

# CORS configuration
CORS_ORIGIN=http://localhost:8080
# In production, use your actual frontend domain
# Multiple origins: http://localhost:8080,https://your-domain.com

# Security headers
HELMET_ENABLED=true
CONTENT_SECURITY_POLICY_ENABLED=true

# Encryption settings
ENCRYPTION_ALGORITHM=aes-256-gcm
ENCRYPTION_KEY=your-32-character-encryption-key-here

# =========================================
# LOGGING CONFIGURATION
# =========================================

# Log level (error, warn, info, http, verbose, debug, silly)
LOG_LEVEL=info

# Log file paths
LOG_FILE_ERROR=logs/error.log
LOG_FILE_COMBINED=logs/combined.log

# Maximum log file size (in bytes)
LOG_MAX_SIZE=5242880
# 5MB = 5242880 bytes

# Maximum number of log files to keep
LOG_MAX_FILES=5

# Log to console (true/false)
LOG_CONSOLE=true

# =========================================
# CACHE CONFIGURATION (REDIS - OPTIONAL)
# =========================================

# Redis configuration (optional, for session store and caching)
# Leave empty to use memory store (not recommended for production)

REDIS_URL=redis://localhost:6379
# Redis connection URL

REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
# Leave empty if no password

# Redis database number (0-15)
REDIS_DB=0

# Redis connection settings
REDIS_CONNECT_TIMEOUT=10000
REDIS_LAZYCONNECT=true

# =========================================
# FILE UPLOAD CONFIGURATION
# =========================================

# Maximum file size for uploads (in bytes)
# 5MB = 5242880 bytes
MAX_FILE_SIZE=5242880

# Allowed file types (comma-separated)
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/webp,image/gif

# Upload directory
UPLOAD_DIR=uploads/

# Image processing settings
IMAGE_QUALITY=80
IMAGE_MAX_WIDTH=1920
IMAGE_MAX_HEIGHT=1080

# =========================================
# EXTERNAL SERVICES
# =========================================

# Google Analytics (optional)
GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX

# Sentry for error tracking (optional)
SENTRY_DSN=https://your-sentry-dsn-here

# AWS S3 for file storage (optional)
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_REGION=us-east-1
AWS_S3_BUCKET=your-s3-bucket-name

# =========================================
# DEVELOPMENT CONFIGURATION
# =========================================

# Development-only settings
DEBUG=chronos:*
# Enable debug logging for development

# Mock services for development
MOCK_EMAIL_SERVICE=false
MOCK_PAYMENT_SERVICE=false
MOCK_SMS_SERVICE=false

# Development database (use separate DB for dev)
DEV_MONGODB_URI=mongodb://localhost:27017/chronos_watch_shop_dev

# =========================================
# PRODUCTION CONFIGURATION
# =========================================

# Production-specific settings (only set in production)

# SSL certificate paths (if serving HTTPS directly)
SSL_CERT_PATH=/path/to/certificate.crt
SSL_KEY_PATH=/path/to/private.key

# Process management
PM2_APP_NAME=chronos-watch-shop
PM2_INSTANCES=max
PM2_MAX_MEMORY=1024M

# Health check settings
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_PATH=/health

# Monitoring endpoints
METRICS_ENABLED=true
METRICS_PATH=/metrics

# =========================================
# BACKUP CONFIGURATION
# =========================================

# Database backup settings
BACKUP_ENABLED=false
BACKUP_SCHEDULE=0 2 * * *
# Daily at 2 AM (cron format)
BACKUP_RETENTION_DAYS=30

# Backup storage
BACKUP_S3_BUCKET=your-backup-bucket
BACKUP_LOCAL_PATH=/backups/

# =========================================
# WEBHOOKS CONFIGURATION
# =========================================

# Webhook URLs for external services
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR/WEBHOOK

# Webhook authentication
WEBHOOK_SECRET=your-webhook-secret-for-verifying-incoming-webhooks

# =========================================
# FEATURE FLAGS
# =========================================

# Feature toggles for enabling/disabling features
FEATURE_EMAIL_VERIFICATION=true
FEATURE_TWO_FACTOR_AUTH=false
FEATURE_SOCIAL_LOGIN=true
FEATURE_GUEST_CHECKOUT=true
FEATURE_WISHLIST=true
FEATURE_REVIEWS=true
FEATURE_COUPONS=false
FEATURE_LOYALTY_POINTS=false

# =========================================
# API RATE LIMITING
# =========================================

# General API rate limiting
API_RATE_LIMIT_WINDOW=900000
# 15 minutes
API_RATE_LIMIT_MAX=1000

# Payment API rate limiting (more restrictive)
PAYMENT_RATE_LIMIT_WINDOW=60000
# 1 minute
PAYMENT_RATE_LIMIT_MAX=10

# =========================================
# TESTING CONFIGURATION
# =========================================

# Test environment settings
TEST_MONGODB_URI=mongodb://localhost:27017/chronos_watch_shop_test
TEST_REDIS_DB=1

# Test payment credentials
TEST_RAZORPAY_KEY_ID=rzp_test_test_key_id
TEST_RAZORPAY_KEY_SECRET=test_key_secret

# =========================================
# MISCELLANEOUS
# =========================================

# Application information
APP_NAME=Chronos Watch Shop
APP_VERSION=1.0.0
APP_DESCRIPTION=Premium E-commerce Platform for Luxury Watches

# Company information
COMPANY_NAME=Chronos Watch Shop
COMPANY_EMAIL=support@chronoswatch.com
COMPANY_PHONE=+1-800-CHRONOS
COMPANY_ADDRESS=123 Watch Street, Time City, TC 12345

# Social media links
SOCIAL_FACEBOOK=https://facebook.com/chronoswatch
SOCIAL_TWITTER=https://twitter.com/chronoswatch
SOCIAL_INSTAGRAM=https://instagram.com/chronoswatch
SOCIAL_LINKEDIN=https://linkedin.com/company/chronoswatch

# =========================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# =========================================

# These will be overridden based on NODE_ENV
# Development overrides are above
# Add staging and production specific overrides here

# Staging environment
# STAGING_MONGODB_URI=mongodb://staging-db/chronos_watch_shop
# STAGING_REDIS_URL=redis://staging-redis:6379

# Production environment
# PRODUCTION_MONGODB_URI=mongodb://prod-db/chronos_watch_shop
# PRODUCTION_REDIS_URL=redis://prod-redis:6379

# =========================================
# NOTES AND INSTRUCTIONS
# =========================================

# SETUP INSTRUCTIONS:
# 1. Copy this file to .env
# 2. Replace all placeholder values with actual credentials
# 3. Never commit .env files to version control
# 4. Use different .env files for different environments
# 5. Keep .env files secure and limit access

# SECURITY BEST PRACTICES:
# - Use strong, unique secrets for all keys
# - Enable 2FA for all external services
# - Regularly rotate secrets and passwords
# - Use environment-specific credentials
# - Monitor for exposed credentials in logs

# GETTING CREDENTIALS:
# - Google OAuth: https://console.cloud.google.com/apis/credentials
# - Razorpay: https://dashboard.razorpay.com/app/keys
# - MongoDB Atlas: https://cloud.mongodb.com/
# - Gmail App Password: https://myaccount.google.com/apppasswords

# TESTING:
# - Use test credentials for development
# - Never use production credentials in development
# - Test all integrations before going live
# - Verify webhook endpoints are working

# DEPLOYMENT:
# - Set NODE_ENV=production in production
# - Use HTTPS in production
# - Configure proper CORS origins
# - Enable rate limiting and security headers
# - Set up monitoring and alerting

# =========================================
# END OF CONFIGURATION
# =========================================